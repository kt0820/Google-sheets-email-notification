function sendExpirationNotifications() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet(); // get active sheet
  const data = sheet.getDataRange().getValues(); // get data from sheet as a 2d array
  const today = new Date(); // get today's date
  const email = "abc@gmail.com"; // hard coded email address to mail to

  const columnIndexes = { // get the index of the columns we want to check for
    mnr: 0,            // col A
    fullName: 1,       // col B
    pcpForm: 3,        // col D
    mds: 4,            // col E
    physical: 5,       // col F
    pa: 7,             // col H
    isp: 8,            // col I
    annualHealth: 9,   // col J
  };

  const expirationRules = { // expiration rules for the columns
    pcpForm: { months: 12 },
    mds: { months: 12 },
    physical: { months: 12 },
    pa: { exact: true },
    isp: { months: 6 },
    annualHealth: { months: 12 },
  };

  const expiringSoon = []; // initialize arrays to hold the items that are already expired and expiring
  const alreadyExpired = [];

  for (let i = 1; i < data.length; i++) { // loop through each row of the data
    const row = data[i];
    const mnr = row[columnIndexes.mnr];         // get MNR (patient number)
    const fullName = row[columnIndexes.fullName]; // get full name of the patient

    for (const [field, rule] of Object.entries(expirationRules)) {
      const value = row[columnIndexes[field]]; 

      // edge case. if the cell is missing (ie missing or discharged) or not a date, skip
      if (!value || typeof value !== "object" || value === "missing" || value === "discharged") continue;

      const date = new Date(value); 
      const oneMonthFromNow = new Date(today);
      oneMonthFromNow.setMonth(today.getMonth() + 1); // check the upcoming expiration

      let expireDate;

      if (rule.exact) { // use exact date for the PA
        expireDate = new Date(date);
      } else { // use expiration rules for the others
        expireDate = new Date(date);
        expireDate.setMonth(date.getMonth() + rule.months);
      }

      const daysDiff = Math.ceil((expireDate - today) / (1000 * 60 * 60 * 24)); // calculate how many days until expiration

      const line = `MNR ${mnr} - ${fullName} - ${field.toUpperCase()} ${daysDiff < 0 ? "expired" : "expires"} on ${expireDate.toLocaleDateString()}`;

      if (daysDiff <= 30 && daysDiff >= 0) {
        expiringSoon.push(line);
      } else if (daysDiff < 0) {
        alreadyExpired.push(line);
      }
    }
  }

  // if nothing is expiring, do nothing
  if (expiringSoon.length === 0 && alreadyExpired.length === 0) {
    Logger.log("No notifications to send.");
    return;
  }

  // prep the email message
  let subject = "AFC Patient Expiration Notification";
  let message = "";

  if (expiringSoon.length > 0) {
    message += "⚠️ The following items are expiring soon (within 30 days):\n\n";
    message += expiringSoon.join("\n") + "\n\n";
  }

  if (alreadyExpired.length > 0) {
    message += "❌ The following items are already expired:\n\n";
    message += alreadyExpired.join("\n") + "\n";
  }

  // send the email
  MailApp.sendEmail(email, subject, message);
}
